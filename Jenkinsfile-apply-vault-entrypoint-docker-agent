pipeline {
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'After fetching AWS creds from Vault, Automatically run apply after generating plan?')
    }

    environment {
        AWS_ACCESS_KEY_ID     = ''
        AWS_SECRET_ACCESS_KEY = ''
    }

    agent any

    stages {
        stage('Fetch AWS Credentials from Vault') {
            steps {
                script {
                    // Fetch AWS credentials from Vault using a Docker container with Vault CLI
                    def vaultContainer = docker.image('hashicorp/vault')
                    vaultContainer.inside {
                        def awsAccessKeyId = sh(script: 'vault kv get -field=AWS_ACCESS_KEY_ID mycreds/aws-creds/vault-admin', returnStdout: true).trim()
                        def awsSecretAccessKey = sh(script: 'vault kv get -field=AWS_SECRET_ACCESS_KEY mycreds/aws-creds/vault-admin', returnStdout: true).trim()

                        // Set environment variables
                        env.AWS_ACCESS_KEY_ID = awsAccessKeyId
                        env.AWS_SECRET_ACCESS_KEY = awsSecretAccessKey
                    }
                }
            }
        }

        stage('Run Terraform') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.6.0'
                    args '-e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY --entrypoint=""'
                }
            }
            stages {
                stage('Verify Docker Setup') {
                    steps {
                        sh 'terraform --version'  // Ensure Terraform command works
                    }
                }

                stage('Checkout') {
                    steps {
                        script {
                            dir("terraform") {
                                git "https://github.com/yeshwanthlm/Terraform-Jenkins.git"
                            }
                        }
                    }
                }

                stage('Plan') {
                    steps {
                        sh 'cd terraform && terraform init'
                        sh 'cd terraform && terraform plan -out=tfplan'
                        sh 'cd terraform && terraform show -no-color tfplan > tfplan.txt'
                    }
                }

                stage('Approval') {
                    when {
                        not {
                            equals expected: true, actual: params.autoApprove
                        }
                    }
                    steps {
                        script {
                            def plan = readFile 'terraform/tfplan.txt'
                            input message: "Do you want to apply the plan?",
                                  parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                        }
                    }
                }

                stage('Apply') {
                    steps {
                        sh 'cd terraform && terraform apply -input=false tfplan'
                        sh 'terraform --version'
                    }
                }
            }
        }
    }
}
